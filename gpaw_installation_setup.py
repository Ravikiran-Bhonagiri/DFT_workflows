# -*- coding: utf-8 -*-
"""GPAW_Installation_setup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ux3jSFEAEhp3quI3Y-nQE019C4uZ0wE
"""

! pip install ase asr pymatgen scipy matplotlib numpy spglib

! sudo apt-get update
! sudo apt-get install -y python3-dev python3-pip build-essential \
                        libopenblas-dev liblapack-dev gfortran \
                        libfftw3-dev libxc-dev libscalapack-mpi-dev \
                        libopenmpi-dev libgsl-dev

! pip install --upgrade pip setuptools wheel

! pip install gpaw

# Extract the PAW datasets
!tar -xzvf /content/gpaw-setups-24.1.0.tar.gz

# Set the GPAW_SETUP_PATH environment variable
import os
os.environ['GPAW_SETUP_PATH'] = '/content/gpaw-setups-24.1.0'

! gpaw install-data /content/gpaw-setups-24.1.0

from ase.build import bulk, surface, make_supercell, add_adsorbate
from ase.io import read, write
from ase.optimize import BFGS
from ase.constraints import FixAtoms
from ase import Atoms
from gpaw import GPAW, PW

# Step 1: Create the 4x4 Supercell and Slab Model
structure = read('/content/InCuS2.cif')  # Update with your CIF file path
supercell = make_supercell(structure, [[4, 0, 0], [0, 4, 0], [0, 0, 1]])

# Create the slab with a vacuum layer
slab = surface(supercell, (0, 0, 1), layers=4, vacuum=15.0)  # Adjust vacuum as needed
slab.center(axis=2)
write('/content/CuInS2_slab.cif', slab)

# Step 2: Structural Optimization of the Slab
# Constrain the bottom layers of the slab
constraint = FixAtoms(mask=[atom.position[2] < 10 for atom in slab])
slab.set_constraint(constraint)

# Set up GPAW calculator for slab optimization
calc = GPAW(mode=PW(500), xc='PBE', kpts=(4, 4, 1), txt='/content/slab_optimization.txt')
slab.set_calculator(calc)

# Optimize the slab geometry
opt = BFGS(slab)
opt.run(fmax=0.05)  # Force tolerance in eV/Å

# Step 3: Adsorption Energy Calculation
# Place H atom at a chosen adsorption site
add_adsorbate(slab, 'H', height=1.0, position=(0, 0))  # Modify position for different sites
write('/content/CuInS2_H_ads.cif', slab)

# Set the calculator for the adsorbed slab
slab.set_calculator(GPAW(mode=PW(500), xc='PBE', kpts=(4, 4, 1), txt='/content/adsorption_energy.txt'))

# Optimize the geometry with H adsorbed
opt = BFGS(slab)
opt.run(fmax=0.05)

# Energy of slab with H adsorbed
E_slab_H = slab.get_potential_energy()

# Step 4: Energy Calculations of Clean Slab and H2 Molecule
# Clean slab energy calculation
slab = read('/content/CuInS2_slab.cif')
slab.set_calculator(GPAW(mode=PW(500), xc='PBE', kpts=(4, 4, 1), txt='/content/clean_slab.txt'))
E_slab = slab.get_potential_energy()

# H2 molecule energy calculation
H2 = Atoms('H2', positions=[[0, 0, 0], [0, 0, 0.74]])  # Approximate bond length of 0.74 Å
H2.set_calculator(GPAW(mode=PW(500), xc='PBE', kpts=(1, 1, 1), txt='/content/H2_energy.txt'))
E_H2 = H2.get_potential_energy()

# Calculate adsorption energy
E_ads = E_slab_H - E_slab - 0.5 * E_H2
print(f'Adsorption Energy: {E_ads:.4f} eV')

# Step 5: Gibbs Free Energy Corrections
# Placeholder for zero-point energy and entropy correction values
ZPE_correction = 0.05  # Example value in eV, calculate based on vibrational analysis
entropy_correction = 0.01  # Example value in eV, adjust with TΔS

# Calculate Gibbs Free Energy of Adsorption
G_ads = E_ads + ZPE_correction - entropy_correction
print(f'Gibbs Free Energy of Adsorption: {G_ads:.4f} eV')

from ase.build import make_supercell, add_adsorbate
from ase.io import read, write
from ase.optimize import BFGS
from ase.constraints import FixAtoms
from ase import Atoms
from gpaw import GPAW, PW

# Step 1: Read the original InCuS2 structure and create a smaller supercell
# Load the CIF file
structure = read('/content/InCuS2.cif')  # Update with your CIF file path

# Create a 2x2x1 supercell to reduce the number of atoms
supercell = make_supercell(structure, [[2, 0, 0], [0, 2, 0], [0, 0, 1]])  # Smaller 2x2 supercell
write('/content/small_InCuS2_slab.cif', supercell)

# Step 2: Create the slab with fewer layers and a vacuum layer
# You can adjust the number of layers (e.g., layers=2) to reduce atom count
slab = supercell.repeat((1, 1, 1))  # No extra repeats to keep the size down
slab.center(vacuum=10.0, axis=2)  # Set vacuum to 10 Å

# Constrain the bottom atoms to simulate bulk-like conditions
constraint = FixAtoms(mask=[atom.position[2] < slab.positions[:, 2].mean() for atom in slab])
slab.set_constraint(constraint)

# Set up the GPAW calculator with reduced parameters
calc = GPAW(mode=PW(400), xc='PBE', kpts=(3, 3, 1), txt='/content/small_slab_optimization.txt')  # Reduced settings
slab.set_calculator(calc)

# Step 3: Optimize the slab geometry
opt = BFGS(slab)
opt.run(fmax=0.05)  # Set force tolerance to 0.05 eV/Å

# Step 4: Adsorption Energy Calculation - Add H atom on the reduced slab
add_adsorbate(slab, 'H', height=1.5, position=(2.0, 2.0))  # Place H atom at a specific site
write('/content/small_InCuS2_H_ads.cif', slab)

# Set calculator for adsorption calculations
slab.set_calculator(GPAW(mode=PW(400), xc='PBE', kpts=(3, 3, 1), txt='/content/small_adsorption_energy.txt'))

# Optimize geometry with H adsorbed
opt = BFGS(slab)
opt.run(fmax=0.05)

# Calculate energy of the slab with H adsorbed
E_slab_H = slab.get_potential_energy()

# Step 5: Energy Calculations of Clean Slab and H2 Molecule
# Clean slab energy calculation
clean_slab = read('/content/small_InCuS2_slab.cif')
clean_slab.set_calculator(GPAW(mode=PW(400), xc='PBE', kpts=(3, 3, 1), txt='/content/small_clean_slab.txt'))
E_slab = clean_slab.get_potential_energy()

# H2 molecule energy calculation
H2 = Atoms('H2', positions=[[0, 0, 0], [0, 0, 0.74]])  # Bond length of 0.74 Å
H2.set_calculator(GPAW(mode=PW(400), xc='PBE', kpts=(1, 1, 1), txt='/content/small_H2_energy.txt'))
E_H2 = H2.get_potential_energy()

# Calculate adsorption energy
E_ads = E_slab_H - E_slab - 0.5 * E_H2
print(f'Adsorption Energy: {E_ads:.4f} eV')

# Step 6: Gibbs Free Energy Corrections
# Placeholder values for zero-point energy and entropy correction
ZPE_correction = 0.03  # Example ZPE value
entropy_correction = 0.01  # Example entropy value

# Calculate Gibbs Free Energy of Adsorption
G_ads = E_ads + ZPE_correction - entropy_correction
print(f'Gibbs Free Energy of Adsorption: {G_ads:.4f} eV')

from sklearn.preprocessing import StandardScaler, MinMaxScaler
import numpy as np

# Sample data
data = np.array([[10], [20], [30], [40], [50]])

# Step 1: Standard Scaling
standard_scaler = StandardScaler()
data_standard_scaled = standard_scaler.fit_transform(data)

# Step 2: Min-Max Scaling
min_max_scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled_to_0_1 = min_max_scaler.fit_transform(data_standard_scaled)


print(data_standard_scaled)
print(data_scaled_to_0_1)